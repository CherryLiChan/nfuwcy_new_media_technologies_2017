1
00:00:07,360 --> 00:00:12,240
I'm Jasmine and I'm a program
manger on the XBOX One engineering team.

2
00:00:12,240 --> 00:00:18,700
One of our biggest features is called
XBOX Live. It's an online service that connects

3
00:00:18,700 --> 00:00:23,940
gamers from all around the world, and we rely
on the internet to make that happen.

4
00:00:23,940 --> 00:00:28,840
This is no easy task and there are a lot of things
happening behind the scenes.

5
00:00:29,660 --> 00:00:35,860
The internet is totally changing how people interact and
connect. But how does it work?

6
00:00:35,860 --> 00:00:39,780
How do the computers all across the world actually communicate with each other?

7
00:00:39,780 --> 00:00:43,000
Let's look at web browsing.

8
00:00:43,480 --> 00:00:49,100
First, you open a web browser. It's the app
you use to access the web pages.

9
00:00:49,380 --> 00:00:55,899
Next, you type in the web address, or URL, which stands
for Uniform Resource Locator of the website

10
00:00:55,900 --> 00:00:59,100
you want to visit like Tumblr.com.

11
00:01:04,060 --> 00:01:06,800
Hi, I'm David Karp, the founder of Tumblr and we're

12
00:01:06,800 --> 00:01:11,140
here today to talk about how those web browsers
we use everyday actually work.

13
00:01:11,880 --> 00:01:17,080
So you've probably wondered what actually
happens when you type an address into your web browser and then hit enter.

14
00:01:17,080 --> 00:01:21,020
And it really is about as crazy
as you can imagine. So in that moment your

15
00:01:21,020 --> 00:01:25,930
computer starts talking to another computer,
called a server, that's usually thousands

16
00:01:25,930 --> 00:01:32,450
of miles away. And in milliseconds your computer
asks that server for a website, and that server

17
00:01:32,450 --> 00:01:36,600
starts to talk back to your computer in a
language called HTTP.

18
00:01:36,600 --> 00:01:40,920
HTTP stands for HyperText Transfer Protocol.

19
00:01:40,920 --> 00:01:43,680
You can kind of think of
it as the language that one computer uses

20
00:01:43,680 --> 00:01:45,720
to ask another computer for a document.

21
00:01:45,720 --> 00:01:48,009
And it's actually really pretty straightforward.

22
00:01:48,009 --> 00:01:52,540
If you were to intercept the conversation
between your computer and a web server on

23
00:01:52,540 --> 00:01:56,670
the internet, it's mainly made up of something
called "GET" requests. Those are really very

24
00:01:56,670 --> 00:02:01,590
simply the word GET and the name of the document
that you're requesting. So if you try to log

25
00:02:01,590 --> 00:02:06,360
into Tumblr and load our login page, all you're
doing is sending a GET request to Tumblr's

26
00:02:06,360 --> 00:02:14,290
server that says GET /login. And that tells
Tumblr's server that you want all of the HTML

27
00:02:14,290 --> 00:02:17,780
code for the Tumblr login page.

28
00:02:17,780 --> 00:02:21,800
So HTML stands
for Hyper Text Markup Language and you can

29
00:02:21,800 --> 00:02:26,470
think of that as the language you use to tell
a web browser how to make a page look.

30
00:02:26,470 --> 00:02:30,540
If you think about something like Wikipedia,
which is really just a big simple document

31
00:02:30,540 --> 00:02:35,630
and HTML is the language that you use to make
that title big and bold, to make the font

32
00:02:35,630 --> 00:02:42,690
the right font, to link certain text to certain
other pages, to make some text bold, to make some

33
00:02:42,690 --> 00:02:46,740
text italic, to put an image in the middle
of the page, to align the image to the right,

34
00:02:46,740 --> 00:02:48,280
to align the image to the left.

35
00:02:48,760 --> 00:02:52,980
The text of
a web page is included directly in the HTML,

36
00:02:52,980 --> 00:02:59,500
but other parts like images or videos are
separate files with their own URLs that 
need to be requested.

37
00:02:59,500 --> 00:03:05,920
The browser sends separate
HTTP requests for each of these and 
displays them as they arrive.

38
00:03:07,720 --> 00:03:15,380
If a web page has a lot
of different images, each of them causes a separate HTTP request and the page loads slower.

39
00:03:18,320 --> 00:03:23,320
Now sometimes when you browse the web, you're not just requesting pages with GET requests.

40
00:03:23,320 --> 00:03:28,760
Sometimes you send information like when you 
fill out a form or type a search query.

41
00:03:28,760 --> 00:03:32,300
Your browser sends this information in plain text

42
00:03:32,300 --> 00:03:36,160
to the web server using an HTTP POST request.

43
00:03:36,160 --> 00:03:38,740
Let's say you log in to Tumblr.

44
00:03:38,740 --> 00:03:45,360
Well the first thing you do is you make a POST request, that is a POST to Tumblr's login page that has

45
00:03:45,360 --> 00:03:49,680
some data attached to it. It has your email
address, it has your password. That goes to

46
00:03:49,680 --> 00:03:55,350
Tumblr's server. Tumblr's server figures out
that okay, you're David. It sends a web page

47
00:03:55,350 --> 00:04:00,480
back to your browser that says, Success! Logged
in as David. But along with that web page,

48
00:04:00,480 --> 00:04:07,000
it also attaches a little bit of invisible cookie
data that your browser sees and knows to save.

49
00:04:07,000 --> 00:04:11,360
And it's really important because it's really
the only way that a website can remember who you are.

50
00:04:11,360 --> 00:04:16,940
All that cookie data really is, is
an ID card for Tumblr. It's a number that

51
00:04:16,940 --> 00:04:21,790
identifies you as David. And your web browser
holds on to that number and the next time

52
00:04:21,790 --> 00:04:26,660
you refresh Tumblr, the next time you go to
Tumblr.com, your web browser knows to automatically

53
00:04:26,660 --> 00:04:30,930
attach that ID number with the request that
it sends over to Tumblr's servers. So now

54
00:04:30,930 --> 00:04:35,970
Tumblr's servers sees the request coming from
your browser, sees the ID number, and knows

55
00:04:35,970 --> 00:04:38,940
"Ok, this is a request from David."

56
00:04:40,280 --> 00:04:43,480
Now, the internet is completely open.

57
00:04:43,480 --> 00:04:49,340
All of its connections are shared and information
is sent in plain text. This makes it possible

58
00:04:49,350 --> 00:04:55,630
for hackers to snoop on any personal information
that you send over the internet. But safe

59
00:04:55,630 --> 00:05:00,970
websites prevent this, by asking your web
browser to communicate on a secure channel

60
00:05:00,970 --> 00:05:07,630
using something called Secure Sockets Layer
and its successor Transport Layer Security.

61
00:05:07,630 --> 00:05:14,000
You can think of SSL and TLS as a layer of
security wrapped around your communications

62
00:05:14,000 --> 00:05:20,530
to protect them from snooping or tampering.
SSL and TLS are active when you see the little

63
00:05:20,530 --> 00:05:27,440
lock that appears in your browser address
bar, next to the HTTPS. The HTTPS protocols

64
00:05:27,440 --> 00:05:33,840
ensure that your HTTP requests are secure
and protected. When a website asks your browser

65
00:05:33,840 --> 00:05:39,500
to engage in a secure connection, it first
provides a digital certificate. Which is like

66
00:05:39,500 --> 00:05:45,140
an official ID card proving that it's the
website it claims to be. Digital certificates

67
00:05:45,140 --> 00:05:49,900
are published by certificate authorities,
which are trusted entities that verify the

68
00:05:49,900 --> 00:05:55,280
identities of websites and issue certificates
for them. Just like a government can issue

69
00:05:55,280 --> 00:06:01,030
IDs or passports. Now if a website tries to
start a secure connection without a properly

70
00:06:01,030 --> 00:06:05,420
issued digital certificate, your browser will
warn you.

71
00:06:07,160 --> 00:06:09,580
That's the basics of web browsing!

72
00:06:09,590 --> 00:06:17,010
The part of the internet we see day to day.
To summarize, HTTP and DNS manage the sending

73
00:06:17,010 --> 00:06:23,450
and receiving of HTML, media files, or anything
on the web. What makes this possible under

74
00:06:23,450 --> 00:06:31,040
the hood are TCP/IP and router networks that
break down and transport information in small packets.

75
00:06:31,040 --> 00:06:36,660
Those packets themselves are made
up of binary, sequences of 1s and 0s that

76
00:06:36,670 --> 00:06:42,550
are physically sent through electric wires,
fiber optic cables, and wireless networks.

77
00:06:42,550 --> 00:06:47,440
Fortunately, once you've learned how one layer
of the internet works, you can rely on it

78
00:06:47,440 --> 00:06:52,070
without remembering all the details. And we
can trust that all those layers will work

79
00:06:52,070 --> 00:00:00,000
together to successively deliver information
at scale and with reliability.

